name: "Build kernels"

env:
  OUT_DIR: "${{ github.workspace }}/out"

on:
  workflow_dispatch:

jobs:
  Set-repos:
    name: "üêÇ Parse repos.json"
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}
      builddate: ${{ steps.generate-builddate.outputs.builddate }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

      - name: "Generate Matrix"
        id: generate-matrix
        run: |
          echo "repos<<EOF" >> $GITHUB_OUTPUT
          jq -s '[.[][]]' repos/repos*.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: "Set builddate"
        id: generate-builddate
        run: echo "builddate=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "üêé Build kernel"
    runs-on: ubuntu-latest
    needs: Set-repos
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        repos: ${{ fromJSON(needs.Set-repos.outputs.repos) }}
    env:
      WORKSPACE: ${{ github.workspace }}
      builddate: "${{ needs.Set-repos.outputs.builddate }}"
      KERNEL_NAME: ${{ matrix.repos.kernelSource.name }}
      KERNEL_REPO: ${{ matrix.repos.kernelSource.repo }}
      KERNEL_BRANCH: ${{ matrix.repos.kernelSource.branch }}
      KERNEL_DEVICE: ${{ matrix.repos.kernelSource.device }}
      DEFCONFIG_NAME: ${{ matrix.repos.kernelSource.defconfig }}
      withKernelSU: ${{ matrix.repos.withKernelSU }}
      ccache: ${{ matrix.repos.ccache }}
      useAnykernel: ${{ matrix.repos.AnyKernel3.use }}
      release: ${{ matrix.repos.AnyKernel3.release }}

    steps:
      - name: "Install prerequisites"
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi \
            libssl-dev libfl-dev curl git ftp lftp wget libarchive-tools ccache python3 python3-dev \
            zip unzip tar gzip bzip2 rar unrar

      - name: "Create ccache key"
        if: ${{ env.ccache == 'true' }}
        id: ccache_key
        run: |
          ccache -o compression=false -o cache_dir=$HOME/.ccache
          echo "CACHE_KEY=$(echo -n '${{ toJSON(matrix.repos) }}' | base64 -w 0 | cut -c -48)" >> $GITHUB_OUTPUT

      - name: "Cache ccache files"
        if: ${{ env.ccache == 'true' }}
        uses: actions/cache@v3
        with:
          path: |
            ~/.ccache
            ${{ env.OUT_DIR }}
          key: ccache-${{ env.KERNEL_NAME }}-${{ steps.ccache_key.outputs.CACHE_KEY }}-${{ env.builddate }}
          restore-keys: |
            ccache-${{ env.KERNEL_NAME }}-${{ steps.ccache_key.outputs.CACHE_KEY }}-${{ env.builddate }}

      - name: "Setup AnyKernel3"
        if: ${{ env.useAnykernel == 'true' }}
        run: |
          git clone --depth=1 --branch ${{ matrix.repos.AnyKernel3.branch }} ${{ matrix.repos.AnyKernel3.repo }} AnyKernel3
          sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
          sed -i 's!block=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!block=auto;!g' AnyKernel3/anykernel.sh
          sed -i 's/is_slot_device=1;/is_slot_device=auto;/g' AnyKernel3/anykernel.sh

      - name: "Clone kernel source"
        run: |
          git clone --depth=1 --branch $KERNEL_BRANCH $KERNEL_REPO $KERNEL_NAME

      - name: "Get toolchains"
        env:
          toolchains: "${{ toJSON(matrix.repos.toolchains) }}"
        run: |
          toolchains_num="$(echo $toolchains | jq 'length')"
          for ((i=0;i<toolchains_num;i++)); do
            toolchain_name=$(echo $toolchains | jq -r ".[$i].name")
            toolchain_repo=$(echo $toolchains | jq -r ".[$i].repo")
            toolchain_branch=$(echo $toolchains | jq -r ".[$i].branch")
            toolchain_url=$(echo $toolchains | jq -r ".[$i].url")

            if [ -z "${toolchain_url:-}" ] || [ "$toolchain_url" = "null" ]; then
              git clone --depth=1 --branch $toolchain_branch $toolchain_repo $toolchain_name
            else
              wget "$toolchain_url"
              filename="${toolchain_url##*/}"
              mkdir -p $toolchain_name
              case "$filename" in
                *.zip) unzip -d $toolchain_name "$filename" ;;
                *.tar) tar xvf "$filename" -C $toolchain_name ;;
                *.tar.gz) tar zxvf "$filename" -C $toolchain_name ;;
                *.rar) unrar x "$filename" $toolchain_name ;;
                *) echo "Unknown file type: $filename" ;;
              esac
            fi

            jq -r ".[$i].binPath[]" <<< "$toolchains" | while read -r bin_path; do
              echo "$WORKSPACE/$toolchain_name/$bin_path" >> $GITHUB_PATH
            done
          done

      - name: "Set build args"
        id: generate-args
        env:
          params: "${{ toJSON(matrix.repos.params) }}"
          THREAD: $(nproc --all)
        run: |
          ARCH=$(echo $params | jq -r ".ARCH")
          CC=$(echo $params | jq -r ".CC")
          args="-j${THREAD}"
          [ -n "${OUT_DIR}" ] && mkdir -p "${OUT_DIR}" && args="$args O=${OUT_DIR}"
          [ -n "$ARCH" ] && args="$args ARCH=$ARCH"
          [ -n "$CC" ] && args="$args CC=${{ env.ccache == 'true' && echo \"ccache $WORKSPACE/$CC\" || echo \"$WORKSPACE/$CC\" }}"

          while read -r externalCommand; do
            key=$(echo "$externalCommand" | cut -d= -f1)
            value=$(echo "$externalCommand" | cut -d= -f2)
            args="$args $key=$WORKSPACE/$value"
          done < <(jq -r '.externalCommand | to_entries[] | "\(.key)=\(.value)"' <<< "$params")

          echo "ARCH=$ARCH" >> $GITHUB_OUTPUT
          echo "args=$args" >> $GITHUB_OUTPUT

      - name: "Update KernelSU"
        if: ${{ env.withKernelSU == 'true' }}
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          arch: ${{ steps.generate-args.outputs.ARCH }}
        run: |
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s main
          echo -e "CONFIG_KPROBES=y\nCONFIG_HAVE_KPROBES=y\nCONFIG_KPROBE_EVENTS=y" >> arch/${{ env.arch }}/configs/${{ env.DEFCONFIG_NAME }}

      - name: "Make defconfig"
        working-directory: ${{ env.KERNEL_NAME }}
        run: make ${{ steps.generate-args.outputs.args }} ${{ env.DEFCONFIG_NAME }}

      - name: "Build kernel"
        working-directory: ${{ env.KERNEL_NAME }}
        run: make ${{ steps.generate-args.outputs.args }}

      - name: "Upload Image"
        uses: actions/upload-artifact@v3
        with:
          name: Image-${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}-${{ env.builddate }}
          path: ${{ env.OUT_DIR }}/arch/${{ steps.generate-args.outputs.ARCH }}/boot/Image
          if-no-files-found: ignore
          retention-days: 7

      - name: "Upload AnyKernel3 zip"
        if: ${{ env.useAnykernel == 'true' }}
        run: |
          cp ${{ env.OUT_DIR }}/arch/${{ steps.generate-args.outputs.ARCH }}/boot/* ./AnyKernel3/ || true
          cd AnyKernel3
          zip -q -r "${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}_${{ env.builddate }}.zip" *

      - name: "Upload zip artifact"
        uses: actions/upload-artifact@v3
        if: ${{ env.useAnykernel == 'true' }}
        with:
          name: "${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}_${{ env.builddate }}"
          path: AnyKernel3/*.zip

      - name
