name: "Kernel Builder"

env:
  OUT_DIR: "${{ github.workspace }}/out"

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Confirm single execution'
        required: true
        default: 'yes'

jobs:
  Set-repos:
    name: "üêÇ Parse repos.json"
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}
      builddate: ${{ steps.generate-builddate.outputs.builddate }}
    steps:
      - name: "üòÑ Checkout"
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: "üòÜ Generate Matrix"
        id: generate-matrix
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.confirm }}" != "yes" ]]; then
            echo "Execution not confirmed"
            exit 1
          fi
          
          echo "repos<<EOF" >> $GITHUB_OUTPUT
          jq -s '[.[][]]' repos/repos*.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: "‚è∞ Set builddate"
        id: generate-builddate
        run: |
          echo "builddate=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "üêé Build kernel - ${{ matrix.repos.kernelSource.name }}"
    runs-on: ubuntu-latest
    needs: Set-repos
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        repos: ${{ fromJSON(needs.Set-repos.outputs.repos) }}
        include: ${{ fromJSON(needs.Set-repos.outputs.repos) }}

    concurrency:
      group: kernel-build-${{ github.ref }}-${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}
      cancel-in-progress: true

    env:
      WORKSPACE: ${{ github.workspace }}
      builddate: "${{ needs.Set-repos.outputs.builddate }}"
      KERNEL_NAME: ${{ matrix.repos.kernelSource.name }}
      KERNEL_REPO: ${{ matrix.repos.kernelSource.repo }}
      KERNEL_BRANCH: ${{ matrix.repos.kernelSource.branch }}
      KERNEL_DEVICE: ${{ matrix.repos.kernelSource.device }}
      DEFCONFIG_NAME: ${{ matrix.repos.kernelSource.defconfig }}
      withKernelSU: ${{ matrix.repos.withKernelSU }}
      ccache: ${{ matrix.repos.ccache }}
      useAnykernel: ${{ matrix.repos.AnyKernel3.use }}
      release: ${{ matrix.repos.AnyKernel3.release }}

    steps:
      - name: "‚≠ê Verify single execution"
        run: |
          if [[ "${{ github.event_name }}" != "workflow_dispatch" ]]; then
            echo "This workflow should only be triggered manually"
            exit 1
          fi

      - name: "‚≠ê Install prerequisites"
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev libfl-dev
          sudo apt-get install -y curl git ftp lftp wget libarchive-tools ccache
          sudo apt-get install -y zip unzip tar gzip bzip2 rar unrar
          sudo apt-get install -y python3 python3-dev python3-pip python-is-python3
          sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 10
          sudo update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 10
          python --version
          pip --version

      - name: "üöÑ Create cache key"
        if: ${{ env.ccache == 'true' }}
        id: ccache_key
        run: |
          ccache -o compression=false -o cache_dir=$HOME/.ccache
          echo "CACHE_KEY=$(echo -n '${{ toJSON(matrix.repos) }}' | base64 -w 0 | cut -c -48)" >> $GITHUB_OUTPUT

      - name: "üöÖ Cache ccache files"
        if: ${{ env.ccache == 'true' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.ccache
            ${{ env.OUT_DIR }}
          key: ccache-${{ env.KERNEL_NAME }}-${{ steps.ccache_key.outputs.CACHE_KEY }}-${{ env.builddate }}
          restore-keys: |
            ccache-${{ env.KERNEL_NAME }}-${{ steps.ccache_key.outputs.CACHE_KEY }}-${{ env.builddate }}

      - name: "‚è∞ Setup Anykernel3"
        env:
          params: "${{ toJSON(matrix.repos.AnyKernel3) }}"
        run: |
          ANYKERNEL_REPO=$(echo $params | jq -r ".repo")
          ANYKERNEL_BRANCH=$(echo $params | jq -r ".branch")
          git clone --recursive --depth=1 -j $(nproc) --branch $ANYKERNEL_BRANCH $ANYKERNEL_REPO AnyKernel3
          sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
          sed -i 's!block=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!block=auto;!g' AnyKernel3/anykernel.sh
          sed -i 's/is_slot_device=1;/is_slot_device=auto;/g' AnyKernel3/anykernel.sh

      - name: "üåü Clone kernel source"
        run: |
          git clone --recursive --depth=1 -j $(nproc) --branch $KERNEL_BRANCH $KERNEL_REPO $KERNEL_NAME

      - name: "üí´ Get toolchains"
        env:
          toolchains: "${{ toJSON(matrix.repos.toolchains) }}"
        run: |
          toolchains_num="$(echo $toolchains | jq 'length')"
          for ((i=0;i<toolchains_num;i++)); do
            toolchain_name=$(echo $toolchains | jq -r ".[$i].name")
            toolchain_repo=$(echo $toolchains | jq -r ".[$i].repo")
            toolchain_branch=$(echo $toolchains | jq -r ".[$i].branch")
            toolchain_url=$(echo $toolchains | jq -r ".[$i].url")
            
            if [ -z "${toolchain_url:-}" ] || [ "$toolchain_url" = "null" ]; then
              git clone --recursive --depth=1 -j $(nproc) --branch $toolchain_branch $toolchain_repo $toolchain_name
            else
              wget "$toolchain_url"
              filename="${toolchain_url##*/}"
              mkdir -p $toolchain_name
              case "$filename" in
                *.zip) unzip -d $toolchain_name "$filename" ;;
                *.tar) tar xvf "$filename" -C $toolchain_name ;;
                *.tar.gz) tar zxvf "$filename" -C $toolchain_name ;;
                *.rar) unrar x "$filename" $toolchain_name ;;
                *) echo "unknown file type: $filename" ;;
              esac
            fi

            jq -r ".[$i].binPath[] | tostring" <<< "$toolchains" | while read -r bin_path; do
              echo "$WORKSPACE/$toolchain_name/$bin_path" >> $GITHUB_PATH
            done
          done

      - name: "üòé Set args"
        id: generate-args
        env:
          params: "${{ toJSON(matrix.repos.params) }}"
          THREAD: $(nproc --all)
        run: |
          ARCH=$(echo $params | jq -r ".ARCH")
          CC=$(echo $params | jq -r ".CC")

          args="-j${{ env.THREAD }}"
          if [ -n "${{ env.OUT_DIR }}" ]; then
            mkdir -p ${{ env.OUT_DIR }} && args="$args O=${{ env.OUT_DIR }}"
          fi
          if [ -n "$ARCH" ]; then
            args="$args ARCH=$ARCH"
          fi
          if [ -n "$CC" ]; then
            if [[ "$CC" == *"/"* ]]; then
              CC=${{ env.WORKSPACE }}/$CC
            fi
            if [ ${{ env.ccache }} = true ]; then
              args="$args CC=\"ccache $CC\""
            else
              args="$args CC=$CC"
            fi
          fi
          while read -r externalCommand; do
            key=$(echo "$externalCommand" | cut -d= -f1)
            value=$(echo "$externalCommand" | cut -d= -f2)
            if [[ "$value" == *"/"* ]]; then
              value="${{ env.WORKSPACE }}/$value"
            fi
            args="$args $key=$value"
          done < <(jq -r '.externalCommand | to_entries[] | "\(.key)=\(.value)"' <<< "$params")
        
          echo "args=$args" >> $GITHUB_OUTPUT
          echo "ARCH=$ARCH" >> $GITHUB_OUTPUT

      - name: "üòã Update KernelSU"
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          arch: ${{ steps.generate-args.outputs.ARCH }}
        if: ${{ env.withKernelSU == 'true' }}
        run: |
          if [ -d "./KernelSU" ]; then rm -rf "./KernelSU"; fi
          if [ -d "./drivers/kernelsu" ]; then rm -rf "./drivers/kernelsu"; fi
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s main
          echo -e "CONFIG_KPROBES=y\nCONFIG_HAVE_KPROBES=y\nCONFIG_KPROBE_EVENTS=y" >> arch/${{ env.arch }}/configs/${{ env.DEFCONFIG_NAME }}

      - name: "üëç Make defconfig"
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
          arch: ${{ steps.generate-args.outputs.ARCH }}
        run: |
          make ${{ env.args }} ${{ env.DEFCONFIG_NAME }}

      - name: "üé∂ Build kernel"
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
        run: |
          make ${{ env.args }}

      - name: "üíæ Upload artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: kernel-artifacts-${{ env.KERNEL_DEVICE }}-${{ env.builddate }}
          path: |
            ${{ env.OUT_DIR }}/arch/*/boot/Image*
            ${{ env.OUT_DIR }}/arch/*/boot/dtbo.img
          retention-days: 1

      - name: "üì¶ Package AnyKernel3"
        if: ${{ env.useAnykernel == 'true' }}
        run: |
          cp ${{ env.OUT_DIR }}/arch/*/boot/Image* AnyKernel3/ || true
          cp ${{ env.OUT_DIR }}/arch/*/boot/dtbo.img AnyKernel3/ || true
          cd AnyKernel3/
          zip -r ../${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}_${{ env.builddate }}.zip *

      - name: "üöÄ Upload AnyKernel3"
        if: ${{ env.useAnykernel == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}_${{ env.builddate }}
          path: ${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}_${{ env.builddate }}.zip
          retention-days: 1

      - name: "üè∑Ô∏è Create Release"
        if: ${{ env.useAnykernel == 'true' && env.release == 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.builddate }}.${{ github.run_number }}
          files: ${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}_${{ env.builddate }}.zip
          generate_release_notes: true
