name: "Build kernels"

env:
  OUT_DIR: "${{ github.workspace }}/out"

on:
  workflow_dispatch:

jobs:
  Set-repos:
    name: "🐂 Parse repos.json"
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}
      builddate: ${{ steps.generate-builddate.outputs.builddate }}
    steps:
      - name: "😄 Checkout"
        uses: actions/checkout@v4

      - name: "😆 Generate Matrix"
        id: generate-matrix
        run: |
          echo "repos<<EOF" >> $GITHUB_OUTPUT
          jq -s '[.[][]]' repos/repos*.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: "⏰ Set builddate"
        id: generate-builddate
        run: echo "builddate=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "🐎 Build kernel"
    runs-on: ubuntu-latest
    needs:
      - Set-repos
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        repos: ${{ fromJSON(needs.Set-repos.outputs.repos) }}
    env:
      WORKSPACE: ${{ github.workspace }}
      builddate: "${{ needs.Set-repos.outputs.builddate }}"
      KERNEL_NAME: ${{ matrix.repos.kernelSource.name }}
      KERNEL_REPO: ${{ matrix.repos.kernelSource.repo }}
      KERNEL_BRANCH: ${{ matrix.repos.kernelSource.branch }}
      KERNEL_DEVICE: ${{ matrix.repos.kernelSource.device }}
      DEFCONFIG_NAME: ${{ matrix.repos.kernelSource.defconfig }}
      withKernelSU: ${{ matrix.repos.withKernelSU }}
      ccache: ${{ matrix.repos.ccache }}
      useAnykernel: ${{ matrix.repos.AnyKernel3.use }}
      release: ${{ matrix.repos.AnyKernel3.release }}
    steps:
         - name: "⭐ Install prerequisites"
          run: |
          sudo apt-get update
          # Install basic build tools
          sudo apt-get install -y build-essential bc gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev libfl-dev
          sudo apt-get install -y curl git ftp lftp wget libarchive-tools ccache
          sudo apt-get install -y zip unzip tar gzip bzip2 rar unrar
          
          # Install Python 3 first
          sudo apt-get install -y python3 python3-dev
          sudo ln -sf /usr/bin/python3 /usr/bin/python
          
          # Build Python 2.7 from source if not available
          if ! command -v python2.7 &> /dev/null; then
            echo "Installing Python 2.7 from source..."
            sudo apt-get install -y build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev \
              libssl-dev libreadline-dev libffi-dev libsqlite3-dev libbz2-dev
            wget https://www.python.org/ftp/python/2.7.18/Python-2.7.18.tgz
            tar -xzf Python-2.7.18.tgz
            cd Python-2.7.18
            ./configure --enable-optimizations
            make -j$(nproc)
            sudo make altinstall
            cd ..
            sudo ln -sf /usr/local/bin/python2.7 /usr/bin/python2.7
          fi

      - name: "🚄 Create cache key from `repos`"
        if: ${{ env.ccache == 'true' }}
        id: ccache_key
        run: |
          ccache -o compression=false -o cache_dir=$HOME/.ccache
          echo "CACHE_KEY=$(echo -n '${{ toJSON(matrix.repos) }}' | base64 -w 0 | cut -c -48)" >> $GITHUB_OUTPUT

      - name: "🚅 Cache ccache files"
        if: ${{ env.ccache == 'true' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.ccache
            ${{ env.OUT_DIR }}
          key: ccache-${{ env.KERNEL_NAME }}-${{ steps.ccache_key.outputs.CACHE_KEY }}-${{ env.builddate }}
          restore-keys: |
            ccache-${{ env.KERNEL_NAME }}-${{ steps.ccache_key.outputs.CACHE_KEY }}-${{ env.builddate }}

      # ... [rest of the workflow remains the same] ...
